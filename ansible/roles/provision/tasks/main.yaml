---
- name: Set host name
  tags:
    - provision-hostname
  hostname:
    name: "{{ hostname }}"

- name: Set timezone
  tags:
    - provision-timezone
  timezone:
    name: America/Los_Angeles

- name: Update packages
  tags:
    - provision-update-packages
  apt:
    name: "*"
    state: latest
    force_apt_get: true

- name: Install packages
  tags:
    - provision-install-packages
  apt:
    name: "{{ item }}"
    state: latest
    force_apt_get: true
  with_items:
    - acl
    - gcc
    - gdal-bin
    - libpq-dev
    - memcached
    - libmemcached-tools
    - openssl
    - python3
    - python3-dev
    - python3-venv
    - uwsgi
    - uwsgi-plugin-python3

- name: Enable uWSGI
  tags:
    - enable-uwsgi
  service:
    name: uwsgi
    enabled: true

# Configure BASH

- name: Configure BASH
  tags:
    - provision-bash
  lineinfile:
    path: /etc/bash.bashrc
    line: "{{ item }}"
  with_items:
    - 'set -o vi'
    - 'bind -m vi-insert "\C-l":clear-screen'
    - 'export EDITOR=vim'

# SSL (Let's Encrypt)

- name: Install certbot
  tags:
    - provision-ssl
  apt:
    name: certbot
    state: latest
    force_apt_get: true

- name: Create cert
  tags:
    - provision-ssl
  command: >
    certbot
    certonly
    --agree-tos
    --domain {{ hostname }}
    --email letsencrypt@wyattbaldwin.com
    --standalone
    --non-interactive
  args:
    creates: /etc/letsencrypt/live/{{ hostname }}/fullchain.pem

- name: Create /etc/pki/nginx for DH params
  tags:
    - provision-ssl
  file:
    path: /etc/pki/nginx
    state: directory

- name: Create DH params
  tags:
    - provision-ssl
  openssl_dhparam:
    path: /etc/pki/nginx/{{ hostname }}.pem
    size: 2048
    select_crypto_backend: openssl

# PostgreSQL

- name: Install Postgres server
  tags:
    - provision-postgres
  apt:
    name: postgresql
    state: latest
    force_apt_get: true

- name: Install PostGIS
  tags:
    - provision-postgres
  apt:
    name: postgresql-12-postgis-3
    state: latest
    force_apt_get: true

- name: Create application database user
  tags:
    - provision-postgres
    - provision-postgres-user
  become: true
  become_user: postgres
  environment:
    PGPASSWORD: "{{ database_password }}"
  command: /usr/bin/createuser --login {{ database_user }}
  register: command_result
  failed_when:
    - command_result.rc != 0
    - "'exists' not in command_result.stderr"

- name: Create application database
  tags:
    - provision-postgres
    - provision-postgres-database
  become: true
  become_user: postgres
  command: /usr/bin/createdb --owner {{ database_user }} {{ database_name }} "MyStops database"
  register: command_result
  failed_when:
    - command_result.rc != 0
    - "'exists' not in command_result.stderr"

- name: Enable postgis extension in application database
  tags:
    - provision-postgres
    - provision-postgres-extensions
  become: true
  become_user: postgres
  command: /usr/bin/psql -c "create extension postgis" {{ database_name }}
  register: command_result
  failed_when:
    - command_result.rc != 0
    - "'exists' not in command_result.stderr"

# Nginx

- name: Install Nginx
  tags:
    - provision-nginx
  apt:
    name: nginx
    state: latest
    force_apt_get: true

- name: Remove unused Nginx config
  tags:
    - provision-nginx
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /etc/nginx/fastcgi.conf
    - /etc/nginx/fastcgi_params
    - /etc/nginx/sites-available
    - /etc/nginx/sites-enabled
    - /etc/nginx/snippets
    - /var/www/html/index.nginx-debian.html
  notify: "restart nginx"

- name: Copy Nginx config
  tags:
    - provision-nginx
  copy:
    src: nginx.conf
    dest: /etc/nginx/
  notify: "restart nginx"

# Site (directory containing site versions)

- name: Create application user and home directory
  tags:
    - provision-site
  user:
    name: "{{ site_user }}"
    home: "{{ remote_site_root }}"
    shell: /bin/bash
